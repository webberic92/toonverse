"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomWebpackBuilder = exports.defaultWebpackConfigPath = void 0;
const core_1 = require("@angular-devkit/core");
const utils_1 = require("./utils");
const webpack_config_merger_1 = require("./webpack-config-merger");
exports.defaultWebpackConfigPath = 'webpack.config.js';
class CustomWebpackBuilder {
    static buildWebpackConfig(root, config, baseWebpackConfig, buildOptions, targetOptions, logger) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!config) {
                return baseWebpackConfig;
            }
            const webpackConfigPath = config.path || exports.defaultWebpackConfigPath;
            const path = `${(0, core_1.getSystemPath)(root)}/${webpackConfigPath}`;
            const tsConfig = `${(0, core_1.getSystemPath)(root)}/${buildOptions.tsConfig}`;
            const configOrFactoryOrPromise = yield resolveCustomWebpackConfig(path, tsConfig, logger);
            if (typeof configOrFactoryOrPromise === 'function') {
                // That exported function can be synchronous either
                // asynchronous. Given the following example:
                // `module.exports = async (config) => { ... }`
                return configOrFactoryOrPromise(baseWebpackConfig, buildOptions, targetOptions);
            }
            // The user can also export a `Promise` that resolves `Configuration`
            // object. Given the following example:
            // `module.exports = new Promise(resolve => resolve({ ... }))`
            // If the user has exported a plain object, like:
            // `module.exports = { ... }`
            // then it will promisified and awaited
            const resolvedConfig = yield configOrFactoryOrPromise;
            return (0, webpack_config_merger_1.mergeConfigs)(baseWebpackConfig, resolvedConfig, config.mergeRules, config.replaceDuplicatePlugins);
        });
    }
}
exports.CustomWebpackBuilder = CustomWebpackBuilder;
function resolveCustomWebpackConfig(path, tsConfig, logger) {
    return __awaiter(this, void 0, void 0, function* () {
        (0, utils_1.tsNodeRegister)(path, tsConfig, logger);
        return (0, utils_1.loadModule)(path);
    });
}
//# sourceMappingURL=custom-webpack-builder.js.map