"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WinstonLogger = void 0;
var colors_1 = __importDefault(require("colors"));
var moment_1 = __importDefault(require("moment"));
var winston_1 = __importDefault(require("winston"));
var levelMap = {
    INFO: 'info',
    DEBUG: 'debug',
    WARN: 'warn',
    ERROR: 'error',
};
function getTransport(handler) {
    if (handler.type === 'console') {
        return new winston_1.default.transports.Console();
    }
    else if (handler.type === 'file') {
        return new winston_1.default.transports.File({ filename: handler.filename });
    }
    throw new Error('Unknown sink type');
}
var humanFormatter = winston_1.default.format.printf(function (info) {
    var colorMap = {
        debug: colors_1.default.cyan,
        info: colors_1.default.green,
        warn: colors_1.default.yellow,
        error: colors_1.default.red,
    };
    var colorize = function (level, text) {
        if (level in colorMap) {
            return colorMap[level](text);
        }
        return text;
    };
    var text = info.level.toUpperCase() + " " + info.time + " " + info.message + " | component=" + info.component;
    var extra = JSON.stringify(info.extra);
    if (!extra || extra.length < 30) {
        text += " extra=" + extra;
    }
    else {
        text += "\nextra=" + JSON.stringify(info.extra, null, 2);
    }
    if ('stack' in info) {
        text += "\n" + info.stack;
    }
    return colorize(info.level, text);
});
var formatterMap = {
    json: winston_1.default.format.json(),
    human: humanFormatter,
};
var WinstonLogger = /** @class */ (function () {
    function WinstonLogger(config) {
        this.config = config;
        this.loggers = [];
        this.loggers = config.handlers.map(function (handler) {
            return winston_1.default.createLogger({
                level: levelMap[config.level],
                format: formatterMap[handler.encoder],
                defaultMeta: { service: 'user-service' },
                transports: getTransport(handler),
            });
        });
    }
    WinstonLogger.prototype.log = function (level, component, message, extra, error) {
        if (this.config.componentFilter.length > 0) {
            var index = this.config.componentFilter.indexOf(component);
            if (index < 0) {
                return;
            }
        }
        for (var _i = 0, _a = this.loggers; _i < _a.length; _i++) {
            var logger = _a[_i];
            var info = {
                appName: this.config.appName,
                appVersion: this.config.appVersion,
                time: moment_1.default().format(),
                component: component,
                message: message,
                extra: extra,
            };
            if (level === 'DEBUG') {
                logger.debug(info);
            }
            else if (level === 'INFO') {
                logger.info(info);
            }
            else if (level === 'WARN') {
                logger.warn(info);
            }
            else if (error && level === 'ERROR') {
                logger.error(__assign({ stack: error.stack }, info));
            }
        }
    };
    WinstonLogger.prototype.debug = function (component, message, extra) {
        this.log('DEBUG', component, message, extra);
    };
    WinstonLogger.prototype.info = function (component, message, extra) {
        this.log('INFO', component, message, extra);
    };
    WinstonLogger.prototype.warn = function (component, message, extra) {
        this.log('WARN', component, message, extra);
    };
    WinstonLogger.prototype.error = function (component, error, extra) {
        this.log('ERROR', component, error.message, extra, error);
    };
    return WinstonLogger;
}());
exports.WinstonLogger = WinstonLogger;
