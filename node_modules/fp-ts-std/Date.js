"use strict";
/**
 * @since 0.1.0
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseDate = exports.unsafeParseDate = exports.isValid = exports.isDate = exports.toISOString = exports.getTime = void 0;
const function_1 = require("fp-ts/function");
const O = require("fp-ts/Option");
/**
 * Get the time in milliseconds from a `Date`.
 *
 * @since 0.1.0
 */
exports.getTime = (x) => x.getTime();
/**
 * Returns a date as a string value in ISO format.
 *
 * @since 0.1.0
 */
exports.toISOString = (x) => x.toISOString();
/**
 * Check if a foreign value is a `Date`.
 *
 * @since 0.1.0
 */
exports.isDate = (x) => x instanceof Date;
/**
 * Check if a `Date` is actually valid. (We all love JavaScript, don't we?)
 *
 * @since 0.1.0
 */
exports.isValid = function_1.flow(exports.getTime, function_1.not(Number.isNaN));
/**
 * Parse a date, leaving open the risk of a failure to parse resulting in an
 * invalid `Date` being returned.
 *
 * @since 0.1.0
 */
exports.unsafeParseDate = (x) => new Date(x);
/**
 * Safely parse a date.
 *
 * @since 0.1.0
 */
exports.parseDate = function_1.flow(exports.unsafeParseDate, O.fromPredicate(exports.isValid));
