/**
 * @since 0.1.0
 */
/**
 * Flip the function/argument order of a curried function.
 *
 * Note that due to limitations to the type system, this function won't work
 * correctly for generic functions.
 *
 * @since 0.1.0
 */
export declare const flip: <A extends unknown[], B extends unknown[], C>(f: (...a: A) => (...b: B) => C) => (...b: B) => (...a: A) => C;
/**
 * Given a curried function with an iterative callback, this returns a new
 * function that behaves identically except that it also supplies an index for
 * each iteration of the callback.
 *
 * @example
 * import * as A from 'fp-ts/Array';
 * import { withIndex } from 'fp-ts-std/Function';
 *
 * const mapWithIndex = withIndex<number, number, number>(A.map);
 * assert.deepStrictEqual(mapWithIndex(i => x => x + i)([1, 2, 3]), [1, 3, 5]);
 *
 * @since 0.5.0
 */
export declare const withIndex: <A, B, C>(f: ((g: (x: A) => B) => (ys: A[]) => C[])) => (g: (i: number) => (x: A) => B) => (ys: A[]) => C[];
