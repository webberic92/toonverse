/**
 * @since 0.1.0
 */
import { Predicate, Refinement } from 'fp-ts/function';
import { Option } from 'fp-ts/Option';
/**
 * Get the time in milliseconds from a `Date`.
 *
 * @since 0.1.0
 */
export declare const getTime: (x: Date) => number;
/**
 * Returns a date as a string value in ISO format.
 *
 * @since 0.1.0
 */
export declare const toISOString: (x: Date) => string;
/**
 * Check if a foreign value is a `Date`.
 *
 * @since 0.1.0
 */
export declare const isDate: Refinement<unknown, Date>;
/**
 * Check if a `Date` is actually valid. (We all love JavaScript, don't we?)
 *
 * @since 0.1.0
 */
export declare const isValid: Predicate<Date>;
/**
 * Parse a date, leaving open the risk of a failure to parse resulting in an
 * invalid `Date` being returned.
 *
 * @since 0.1.0
 */
export declare const unsafeParseDate: (x: string | number) => Date;
/**
 * Safely parse a date.
 *
 * @since 0.1.0
 */
export declare const parseDate: (ts: string | number) => Option<Date>;
