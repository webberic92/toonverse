export function u64(h: any, l: any): void;
export class u64 {
    constructor(h: any, l: any);
    hi: any;
    lo: any;
    set(oWord: any): void;
    add(oWord: any): u64;
    addOne(): void;
    plus(oWord: any): u64;
    not(): u64;
    one(): u64;
    zero(): u64;
    neg(): u64;
    minus(oWord: any): u64;
    isZero(): boolean;
    multiply(multiplier: any): u64;
    shiftLeft(bits: any): u64;
    setShiftLeft(bits: any): u64;
    shiftRight(bits: any): u64;
    rotateLeft(bits: any): any;
    setRotateLeft(bits: any): any;
    rotateRight(bits: any): any;
    setFlip(): u64;
    setRotateRight(bits: any): any;
    xor(oWord: any): u64;
    setxorOne(oWord: any): u64;
    and(oWord: any): u64;
    clone(): u64;
    setxor64(...args: any[]): u64;
}
export function u(h: any, l: any): u64;
export function xor64(...args: any[]): any;
export function clone64Array(array: any): any[];
export function t32(x: any): number;
export function rotl32(x: any, c: any): number;
export function rotr32(x: any, c: any): any;
export function swap32(val: any): number;
export function swap32Array(a: any): any[];
export function xnd64(x: any, y: any, z: any): any;
export function bufferInsert(buffer: any, bufferOffset: any, data: any, len: any, dataOffset: any): void;
export function bufferInsert64(buffer: any, bufferOffset: any, data: any, len: any): void;
export function bufferInsertBackwards(buffer: any, bufferOffset: any, data: any, len: any): void;
export function bufferSet(buffer: any, bufferOffset: any, value: any, len: any): void;
export function bufferXORInsert(buffer: any, bufferOffset: any, data: any, dataOffset: any, len: any): void;
export function xORTable(d: any, s1: any, s2: any, len: any): void;
