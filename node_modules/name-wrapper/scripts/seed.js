const fs = require('fs')
const n = require('eth-ens-namehash')
const envfile = require('envfile')
const sourcePath = './.env'
const packet = require('dns-packet')
const { utils, BigNumber: BN } = ethers
const { use, expect } = require('chai')
const { solidity } = require('ethereum-waffle')
const resolverAbi = require('@ensdomains/ens-contracts').PublicResolver

use(solidity)

const namehash = n.hash
const labelhash = (label) => utils.keccak256(utils.toUtf8Bytes(label))

function encodeName(name) {
  return '0x' + packet.name.encode(name).toString('hex')
}

async function main() {
    const sourceFile = fs.readFileSync(sourcePath)
    const parsedFile = envfile.parse(sourceFile);
    const [deployer] = await ethers.getSigners();
    console.log({parsedFile})
    const CAN_DO_EVERYTHING = 0
    const CANNOT_UNWRAP = 1
    const CANNOT_SET_RESOLVER = 8
    const firstAddress = deployer.address
    // const firstAddress = '0x97bA55F61345665cF08c4233b9D6E61051A43B18'
    // console.log("Account balance:", (await deployer.getBalance()).toString());
    // const {
    //   REGISTRY_ADDRESS:registryAddress,
    //   REGISTRAR_ADDRESS:registrarAddress,
    //   WRAPPER_ADDRESS:wrapperAddress
    // } = parsedFile
    // const registryAddress = '0x112234455c3a32fd11230c42e7bccd4a84e02010'
    // const registrarAddress = '0x9De50f28b5BC29C447a927f71c79b800891dC316'
    // const wrapperAddress ='0x9029c1574f91696026358d4edB0De773d0E04aeD'

    const registryAddress = '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e'
    const registrarAddress = '0x57f1887a8BF19b14fC0dF6Fd9B2acc9Af147eA85'
    const wrapperAddress = '0x9029c1574f91696026358d4edB0De773d0E04aeD'
    const resolverAddress = '0xf6305c19e814d2a75429Fd637d01F7ee0E77d615'
    const metadataserviceAddress = '0xECc5d54D2Da9E23cAa5C70Cda83ECd6ea3BE7345'
    console.log({
      registryAddress,registrarAddress, wrapperAddress, firstAddress
    })
    // const name = 'wrappertest'
    const name = 'postmigration'
    const EnsRegistry = await (await ethers.getContractFactory("ENSRegistry")).attach(registryAddress);
    const BaseRegistrar = await (await ethers.getContractFactory("BaseRegistrarImplementation")).attach(registrarAddress);
    const NameWrapper = await (await ethers.getContractFactory("NameWrapper")).attach(wrapperAddress);
    const namehashedname = namehash(`${name}.eth`)
    const labelhashedname = labelhash(name)

    console.log(1,{name, namehashedname, labelhashedname, wrapperAddress:NameWrapper.address})
    console.log(1.01, {
      address:EnsRegistry.address
    })
    // console.log(1,1, await EnsRegistry.owner(namehashedname))
    // console.log(1,2, await BaseRegistrar.ownerOf(labelhashedname))
    // console.log(1,3, await NameWrapper.ownerOf(namehashedname))
    // await BaseRegistrar.setApprovalForAll(NameWrapper.address, true)
    // console.log(2)
    // await EnsRegistry.setApprovalForAll(NameWrapper.address, true)
    // console.log(3)
    // await NameWrapper.wrapETH2LD(name, firstAddress, CAN_DO_EVERYTHING)
    // console.log(4)
    // await NameWrapper.setSubnodeOwnerAndWrap(namehash(`${name}.eth`), 'sub1', firstAddress, CAN_DO_EVERYTHING)
    // const signer = deployer.provider.getSigner()
    // await NameWrapper.setSubnodeOwnerAndWrap(namehash(`${name}.eth`), 'sub2', firstAddress, CAN_DO_EVERYTHING)
    // await NameWrapper.setResolver(namehash(`sub2.${name}.eth`), publicResolverAddress)
    // await Resolver.setText(namehash(`sub2.${name}.eth`), 'avatar', 'https://i.imgur.com/JcZESMp.png')

    // const Resolver = new ethers.Contract(resolverAddress, resolverAbi, signer)
    // await Resolver.setAuthorisation(namehash(`sub2.${name}.eth`), firstAddress, true)
    // console.log(namehash(`sub2.${name}.eth`), wrapperAddress, firstAddress)
    // console.log(await Resolver.authorisations(namehash(`sub2.${name}.eth`), wrapperAddress, firstAddress))
    // await resolver.setAuthorisation(node, accounts[1], true, {from: accounts[0]});
    // assert.equal(await resolver.authorisations(node, accounts[0], accounts[1]), true);
    // await Resolver.setText(namehash(`sub2.${name}.eth`), 'avatar', 'https://i.imgur.com/JcZESMp.png')

    // await NameWrapper.burnFuses(namehash(`sub2.${name}.eth`),CANNOT_UNWRAP)
    // await NameWrapper.burnFuses(namehash(`sub2.${name}.eth`),CANNOT_SET_RESOLVER)
    // await NameWrapper.unwrap(namehash(`${name}.eth`), labelhash('sub1'), firstAddress)
    console.log(11, {metadataserviceAddress, namehashedname})
    console.log(12, await NameWrapper.uri(namehashedname))
    let r = await NameWrapper.setMetadataService(metadataserviceAddress)
    console.log(12, r)
    let tokenURI = await NameWrapper.uri(namehashedname)
    console.log('owner', {tokenURI})
  }
  
  main()
    .then(() => process.exit(0))
    .catch(error => {
      console.error(error);
      process.exit(1);
    });